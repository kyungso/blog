{"data":{"site":{"siteMetadata":{"author":{"name":"Kingso","contacts":{"twitter":"#"}},"disqusShortname":"kingsoblog","subtitle":"Kingso's blog","title":"Kingso's blog","url":"https://kingso.netlify.com"}},"markdownRemark":{"id":"89f1be80-aadc-526e-9d82-cb2e2fb1249e","html":"<br>\n<blockquote>\n<p>“야곰님의 Youtube” <a href=\"https://youtu.be/gp5LeSxfD8Q\">!(프론트엔드개발자)에게 프론트엔드 개발의 이해를 위한 세미나)</a></p>\n</blockquote>\n<br>\n<h4 id=\"플랫폼이란-무엇인가\"><a href=\"#%ED%94%8C%EB%9E%AB%ED%8F%BC%EC%9D%B4%EB%9E%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80\" aria-label=\"플랫폼이란 무엇인가 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>플랫폼이란 무엇인가?</h4>\n<p>소스코드가 돌아가는 곳</p>\n<p>안드로이드 - Java\n아이폰 - Swift\n브라우저 - React</p>\n<h4 id=\"브라우저의-발전\"><a href=\"#%EB%B8%8C%EB%9D%BC%EC%9A%B0%EC%A0%80%EC%9D%98-%EB%B0%9C%EC%A0%84\" aria-label=\"브라우저의 발전 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>브라우저의 발전</h4>\n<p>node V8 엔진의 탄생\nnode.js를 중심으로 프론트엔드 태크스택이 독립적으로 발전할 수 있게됨</p>\n<h4 id=\"개발환경\"><a href=\"#%EA%B0%9C%EB%B0%9C%ED%99%98%EA%B2%BD\" aria-label=\"개발환경 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>개발환경</h4>\n<ul>\n<li>\n<p><strong>트랜트파일러 - 바벨</strong>\n: ECMAScript2015(ES6+) 이전 버전의 언어만 사용하는 브라우저들에게 그들의 언어로 변환해주는 모듈</p>\n</li>\n<li>\n<p><strong>번들러 - 웹팩</strong>\n: 내가 사용하는 소스코드만 뽑아서 번들링 해준다. 현재는 버전 4까지 나왔고, 보통 버전 3을 많이 쓴다.\n<a href=\"https://goo.gl/Hs7YpP\">[참고 링크]</a></p>\n</li>\n<li>\n<p><strong>node 패키지 매니저 - npm</strong></p>\n</li>\n<li>\n<p><strong>CRA(Create React App)</strong>\n: 트랜스파일, 번들 기능을 사용하기 위해 관례적(의례적)인 설정을 재작성하는 불편함 create-react-app my-app 한번으로 해결.</p>\n</li>\n</ul>\n<h4 id=\"리액트-특징\"><a href=\"#%EB%A6%AC%EC%95%A1%ED%8A%B8-%ED%8A%B9%EC%A7%95\" aria-label=\"리액트 특징 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>리액트 특징</h4>\n<p>페이스북에서 ‘뷰만 담당하는 라이브러리이다’라고 리액트를 정의하고 데이터 바인딩을 1-way로 선택.\n리액트가 확대되기 전, angular1이 널리 사용되고 있었는데, angular1은 2-way 바인딩이다.</p>\n<p>2-way 바인딩은 누구나 데이터를 바꿀 수 있고,\n1-way 바인딩은 누구도 데이터를 바꿀 수 없다라고 쉽게 이해하면 된다.</p>\n<ul>\n<li>\n<p><strong>컴포넌트 생명주기</strong>\n: 컴포넌트가 생성되고 소멸되기까지 호출되는 함수. Lifecycle API\n컴포넌트는 안드로이드 기준으로 액티비티\n<a href=\"https://goo.gl/A9agGU\">[참고링크]</a></p>\n</li>\n<li>\n<p><strong>데이터 바인딩</strong>\n: React에는 state와 props 2가지 데이터 타입이 존재한다.</p>\n<ul>\n<li>state는 말 그대로 상태. 자기만 가지고, 자기가 핸들링 할 수 있는 것. (mutable)</li>\n<li>props는 properties를 뜻함. (immutable)</li>\n</ul>\n<br>\n<p><img src=\"/media/react1.jpg\" alt=\"react1.jpg\">  </p>\n<br>\n<ul>\n<li>parent 자신의 state를 child로 내려준다. 이 child는 parent의 state를 props로 받는다.</li>\n<li>그럼 이 child 컴포넌트를 parent가 생성을 하면서, 자기가 가진 여러 state 중의 하나를 주입을 한다.</li>\n<li>그러면 child는 parent로부터 전달받은 데이터를 props라는 객체를 통해서 접근할 수 있다.</li>\n<li>child 컴포넌트가 사용자로부터 인식한 이벤트를 parent로 전달하고, parent가 이벤트를 처리하는 구조.</li>\n</ul>\n</li>\n</ul>\n<br>\n<p>컴포넌트들은 parent든, child든 state를 가진다. 그래서 리액트에서는 state가 필요하다는 ‘stateful 컴포넌트’, state를 사용하지 않겠다는 ‘stateless 컴포넌트’가 존재한다.</p>\n<p>그렇게 되면, ‘stateless 컴포넌트’는 무조건 props만 가지고 있게 됩니다.</p>\n<p><strong>리액트는 state나 props 데이터가 변경되면 ‘rerendering’ 하는 특징을 가지고 있습니다.</strong> Virtual DOM이라는 가상의 DOM 객체를 만들어서 실제 브라우저에 보여지는 물리 DOM을 직접 핸들링하지 않고, 메모리에 있는 값을 swap 하는 형태이다.</p>\n<p>처음부터 다시 그려지면 시간, 비용이 비쌀텐데라고 생각이 들텐데, 다시 그려지는건 Virtual DOM만 다시 그려진다. Virtual DOM만 새로 그려지고, 이전에 존재했던 물리적인 DOM 객체와 비교해서 변경된 부분만 주입시키는 것이다.</p>\n<p>따라서 rerendering은 메모리에서만 일어나고, 실제로 변경되는 부분은 극히 미미하다.</p>\n<br>\n<h4 id=\"redux에서-mobx로\"><a href=\"#redux%EC%97%90%EC%84%9C-mobx%EB%A1%9C\" aria-label=\"redux에서 mobx로 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Redux에서 Mobx로</h4>\n<p>React를 보다보면 데이터 처리를 어떻게 할 것인지 생각하는게 중요해진다.</p>\n<p>Redux는 Flux 패턴을 사용했고, Store라는 하나의 큰 데이터 스토어가 있습니다. 그 데이터 스토어는 Redux라고 불리는 데이터 핸들러에서만 변경이 가능하고, 그 Redux에서 변경된 데이터는 action이라고 불리는 dispatcher를 통해서 전파됩니다. 그 action을 수신하고 있는 컴포넌트가 props로 데이터를 받는 것이다.</p>\n<p>Mobx는 Observer 패턴이다.\ndata와 data를 핸들링할 수 있는 action이라 불리는 함수를 가진다.</p>\n<br>\n<br>\n<h3 id=\"-mobx로-슈퍼마켓-구현하기-\"><a href=\"#-mobx%EB%A1%9C-%EC%8A%88%ED%8D%BC%EB%A7%88%EC%BC%93-%EA%B5%AC%ED%98%84%ED%95%98%EA%B8%B0-\" aria-label=\" mobx로 슈퍼마켓 구현하기  permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>&#x3C; Mobx로 슈퍼마켓 구현하기 ></h3>\n<p>@Velopert 블로그 시리즈 중 마지막 장의 슈퍼마켓 구현\n산타모니카 주문 데이터로 주문목록 구현\n<a href=\"http://bitly.kr/63L7uA\">[슈퍼마켓 링크]</a></p>\n<p>먼저 원하는 곳으로 이동하여, CRA 생성</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ npx create-react-app dcode-mobx-seminar</code></pre></div>\n<p>dcode-mobx-seminar 부분은 원하는 임의의 이름으로 설정하면 된다.</p>\n<p>설치가 완료되면, 생성한 폴더로 이동하여 테스트를 해보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">cd</span> dcode-mobx-seminar  \n$ <span class=\"token function\">yarn</span> start</code></pre></div>\n<p>실행되는 것을 볼 수 있다. localhost:3000</p>\n<p>이제 WebStorm이나 VSCode IDE에서 생성한 폴더를 열어봅시다.</p>\n<br>\n<h5 id=\"1-counterjs-파일-생성\"><a href=\"#1-counterjs-%ED%8C%8C%EC%9D%BC-%EC%83%9D%EC%84%B1\" aria-label=\"1 counterjs 파일 생성 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. Counter.js 파일 생성</h5>\n<p>src 디렉토리에 components 폴더를 생성하고, Counter.js 파일을 생성합니다. 다른 파일에서 import를 할 수 있도록 하기 위해 코드 마지막 부분에 export 시켜줍니다.</p>\n<br>\n<p><img src=\"/media/Counter_js.jpg\" alt=\"Counter_js.jpg\">  </p>\n<br>\n<h5 id=\"2-appjs-파일-수정\"><a href=\"#2-appjs-%ED%8C%8C%EC%9D%BC-%EC%88%98%EC%A0%95\" aria-label=\"2 appjs 파일 수정 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. App.js 파일 수정</h5>\n<p>다음으로, App.js 파일에서 header 태그 부분을 삭제하고 Counter를 import 한다.</p>\n<br>\n<p><img src=\"/media/App_js.jpg\" alt=\"App_js.jpg\">  </p>\n<br>\n<h5 id=\"3-실행\"><a href=\"#3-%EC%8B%A4%ED%96%89\" aria-label=\"3 실행 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 실행</h5>\n<p>이제 Terminal 창에서 아래의 명령어를 입력하고, 결과를 확인한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">yarn</span> start</code></pre></div>\n<p>+1 버튼을 누르면 값이 1씩 증가하고, -1 버튼을 누르면 값이 1씩 감소하는 것을 볼 수 있습니다.</p>\n<br>\n<h5 id=\"4-mobx-mobx-react-설치\"><a href=\"#4-mobx-mobx-react-%EC%84%A4%EC%B9%98\" aria-label=\"4 mobx mobx react 설치 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. mobx mobx-react 설치</h5>\n<p>이제 ctrl + c 로 종료하고, mobx mobx-react를 설치할 것입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">yarn</span> <span class=\"token function\">add</span> mobx mobx-react</code></pre></div>\n<p>mobx는 ES7부터 도입된 decorator라고 불리고, 익히 알고있는 어노테이션(’@‘로 시작하는)을 활용할 수 있게 되는데, 활용하기 위해선 바벨(babel)을 써야합니다.</p>\n<h5 id=\"5-react-scripts\"><a href=\"#5-react-scripts\" aria-label=\"5 react scripts permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5. react-scripts</h5>\n<p>다시 프로젝트로 돌아가서, package.json 파일에서 ‘react-scripts’를 제거합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">yarn</span> remove react-scripts   \n$ <span class=\"token function\">yarn</span> <span class=\"token function\">add</span> -D react-scripts@2.1.1</code></pre></div>\n<br>\n<blockquote>\n<p>참고로 ‘-D’는 ‘—dev’랑 동일한 것으로, package.json 파일에서 devDependencies를 의미하는 것입니다.</p>\n</blockquote>\n<br>\n<h5 id=\"6-react-app-rewired\"><a href=\"#6-react-app-rewired\" aria-label=\"6 react app rewired permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>6. react-app-rewired</h5>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">yarn</span> <span class=\"token function\">add</span> react-app-rewired@1.6.2</code></pre></div>\n<p>위의 react-app-rewired 는 커스텀 하고자 하는 것만 커스텀 하게 해주는 모듈이다.</p>\n<h5 id=\"7-babel-플러그인\"><a href=\"#7-babel-%ED%94%8C%EB%9F%AC%EA%B7%B8%EC%9D%B8\" aria-label=\"7 babel 플러그인 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>7. babel 플러그인</h5>\n<p>계속해서 babel의 플러그인을 설치해봅시다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">yarn</span> <span class=\"token function\">add</span> -D @babel/plugin-proposal-decorators</code></pre></div>\n<p>package.json 파일에 devDependencies에 babel 플러그인과 react-scripts가 들어가 있는 것을 확인할 수 있습니다.</p>\n<h5 id=\"8-프로젝트-실행\"><a href=\"#8-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EC%8B%A4%ED%96%89\" aria-label=\"8 프로젝트 실행 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>8. 프로젝트 실행</h5>\n<p>이제 우리는 react-scripts로 프로젝트를 실행시키지 않고, react-app-rewired로 프로젝트를 실행시킬 것입니다.</p>\n<p>따라서 package.json 파일에서  scripts 부분의 start와 build 부분을 변경합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token punctuation\">..</span>.\n\n<span class=\"token string\">\"scripts\"</span><span class=\"token keyword\">:</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"start\"</span><span class=\"token keyword\">:</span> <span class=\"token string\">\"react-app-rewired start\"</span>,\n  <span class=\"token string\">\"build\"</span><span class=\"token keyword\">:</span> <span class=\"token string\">\"react-app-rewired build\"</span>,\n  <span class=\"token string\">\"test\"</span><span class=\"token keyword\">:</span> <span class=\"token string\">\"react-scripts test\"</span>,\n  <span class=\"token string\">\"eject\"</span><span class=\"token keyword\">:</span> <span class=\"token string\">\"react-scripts eject\"</span>\n<span class=\"token punctuation\">}</span>,\n\n<span class=\"token punctuation\">..</span>.</code></pre></div>\n<p>변경 후, ‘yarn start’ 명령어를 다시 실행합니다.</p>\n<p>“Error: Cannot find module ‘/Users/ksjung/frontend_study/dcode-mobx-seminar/config-overrides’” 라는 error가 나타납니다.</p>\n<p>프로젝트 root 디렉토리에 config-overrides.js 파일을 생성해줍니다.</p>\n<br>\n<p><img src=\"/media/config_overrides.jpg\" alt=\"config_overrides.jpg\">  </p>\n<br>\n<p>설정 후, ‘yarn start’ 명령어를 실행합니다.</p>\n<p>예전과 동일하게 작동하는 것을 볼 수 있습니다.</p>\n<br>\n<h5 id=\"9-mobx의-핵심-store-만들기\"><a href=\"#9-mobx%EC%9D%98-%ED%95%B5%EC%8B%AC-store-%EB%A7%8C%EB%93%A4%EA%B8%B0\" aria-label=\"9 mobx의 핵심 store 만들기 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>9. mobx의 핵심 store 만들기</h5>\n<p>src 폴더에 stores 폴더를 생성하고, CounterStore.js 파일을 생성합니다.</p>\n<br>\n<p><img src=\"/media/counterstore_js.jpg\" alt=\"counterstore_js.jpg\">  </p>\n<br>\n<p>class를 생성하면 습관적으로 export를 해줘야 한다. 이번 경우에는 new 연산자를 통해서 생성해줘야 합니다. 그 이유는 이건 리액트 컴포넌트가 아니라 ES6 클래스이기 때문에 사용할 수 있게 인스턴스화 시켜줘야 합니다.</p>\n<br>\n<blockquote>\n<p><strong>[참고]<br>\nCRA를 활용해서 리액트 프로젝트를 만들면, 앱의 시작점은 index.js, 컴포넌트의 시작점은 App.js</strong></p>\n</blockquote>\n<br>","fields":{"slug":"/posts/frontend-lecture1/","tagSlugs":["/tag/frontend/"]},"frontmatter":{"date":"2019-06-09T14:00:00.169Z","description":"","tags":["frontend"],"title":"프론트엔드의 이해"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/frontend-lecture1/"}}