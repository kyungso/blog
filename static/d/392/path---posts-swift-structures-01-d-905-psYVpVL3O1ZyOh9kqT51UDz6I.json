{"data":{"site":{"siteMetadata":{"author":{"name":"Kingso","contacts":{"twitter":"#"}},"disqusShortname":"kingsoblog","subtitle":"Kingso's blog","title":"Kingso's blog","url":"https://kingso.netlify.com"}},"markdownRemark":{"id":"4623ca1b-d089-57ea-9a2e-a57f47e595f2","html":"<h1 id=\"structures-구조체\"><a href=\"#structures-%EA%B5%AC%EC%A1%B0%EC%B2%B4\" aria-label=\"structures 구조체 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Structures (구조체)</h1>\n<p>structures : Values</p>\n<p>—> represent values 하게 디자인 되어있다.</p>\n<p>classes : objects</p>\n<p>—> represent objects 하게 디자인 되어있다.</p>\n<p>두 개 very similar</p>\n<p>Structures은 tuples와 비슷한데, 관련된 data끼리 같이 그룹으로 묶여있다고 생각하면 된다.</p>\n<p>예를 들면, 한 사람의 정보 firstName, lastName, favoriteColor를 가지고 있다고 하자. tuples과 다르게 structure은 class처럼 method들을 가지고 있다.</p>\n<h2 id=\"property\"><a href=\"#property\" aria-label=\"property permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Property</h2>\n<p>what structure has</p>\n<p>프로퍼티는 구조체, 클래스, 열거형 내부에 구현할 수 있습니다.</p>\n<h4 id=\"stored-property-저장-프로퍼티\"><a href=\"#stored-property-%EC%A0%80%EC%9E%A5-%ED%94%84%EB%A1%9C%ED%8D%BC%ED%8B%B0\" aria-label=\"stored property 저장 프로퍼티 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Stored Property (저장 프로퍼티)</h4>\n<p>구조체 안에 선언된 변수들로 아래의 예제에서 location과 deliveryDistance</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">struct</span> <span class=\"token builtin\">Restaurant</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> location<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Location</span>\n  <span class=\"token keyword\">var</span> deliveryDistance<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Miles</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4 id=\"computed-property-연산-프로퍼티\"><a href=\"#computed-property-%EC%97%B0%EC%82%B0-%ED%94%84%EB%A1%9C%ED%8D%BC%ED%8B%B0\" aria-label=\"computed property 연산 프로퍼티 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Computed Property (연산 프로퍼티)</h4>\n<p>기존에 선언된 저장 프로퍼티를 가지고 특정한 연산을 해주기 위한 프로퍼티. 예를 들면 한국 나이인 저장 프로퍼티를 가지고 미국 나이를 계산하기 위해 사용한다던지, 달러를 저장 프로퍼티로 가지고 원화로 연산하는 프로퍼티를 사용할 수 있다. 따라서 한국 나이와 미국 나이, 달러와 원화가 동기화되어 하나가 변경되면 다른 하나도 변경될 수 있다.</p>\n<p>항상 var로 선언해야한다.  </p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">struct</span> <span class=\"token builtin\">Money</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> currencyRate<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Double</span> <span class=\"token operator\">=</span> <span class=\"token number\">1100</span>\n  <span class=\"token keyword\">var</span> dollar<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Double</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n  <span class=\"token keyword\">var</span> won<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Double</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">get</span> <span class=\"token punctuation\">{</span>\n    \t<span class=\"token keyword\">return</span> dollar <span class=\"token operator\">*</span> currencyRate\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">set</span> <span class=\"token punctuation\">{</span>\n      dollar <span class=\"token operator\">=</span> newValue <span class=\"token operator\">/</span> currencyRate\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> moneyInMyPocket <span class=\"token operator\">=</span> <span class=\"token function\">Money</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nmoneyInMyPocket<span class=\"token punctuation\">.</span>won <span class=\"token operator\">=</span> <span class=\"token number\">11000</span>\t\t<span class=\"token comment\">//11000</span></code></pre></div>\n<p>보통은 get, set(willSet, didSet)</p>\n<h4 id=\"type-properties-타입-프로퍼티\"><a href=\"#type-properties-%ED%83%80%EC%9E%85-%ED%94%84%EB%A1%9C%ED%8D%BC%ED%8B%B0\" aria-label=\"type properties 타입 프로퍼티 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Type Properties (타입 프로퍼티)</h4>\n<p>static 키워드를 사용해서 타입과 관련된 프로퍼티를 선언할 때 사용한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">struct</span> <span class=\"token builtin\">Student</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">var</span> typeDescription<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"학생\"</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">Student</span><span class=\"token punctuation\">.</span>typeDescription<span class=\"token punctuation\">)</span>\t<span class=\"token comment\">//학생</span></code></pre></div>\n<h4 id=\"property-observers\"><a href=\"#property-observers\" aria-label=\"property observers permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Property Observers</h4>\n<p>observer 직역하면 ‘관찰자’라고 해석할 수 있는데, 그 의미를 가지고 보자면 프로퍼티 감시자를 사용하면 프로퍼티 값이 변경될 때 원하는 동작을 수행할 수 있다.   </p>\n<p>프로퍼티 감시자는 함수, 메서드, 클로저, 타입 등의 외부에 위치한 지역, 전역 변수에 모두 사용 가능하다.  </p>\n<p>쉽게 설명하자면, firstName 변수를 계속 지켜보면서 값의 변화가 있을 때마다 메세지를 출력한다던지 원하는 기능을 할 수 있다는 뜻이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">var</span> firstName<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">willSet</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">didSet</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span>firstName<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> lastName<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>firstName <span class=\"token operator\">=</span> firstName\n  <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>lastName <span class=\"token operator\">=</span> lastName\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Struct is initialized</span>\n<span class=\"token keyword\">var</span> wizard <span class=\"token operator\">=</span> <span class=\"token builtin\">Wizard</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span>\n\tfirstName<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Gandalf\"</span><span class=\"token punctuation\">,</span>\n  lastName<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Greyjot\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// firstName is changed</span>\nwizard<span class=\"token punctuation\">.</span>firstName <span class=\"token operator\">=</span> <span class=\"token string\">\"Mustrum\"</span>\n\n<span class=\"token comment\">// Property observers are called</span>\n<span class=\"token keyword\">var</span> firstName<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">willSet</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">didSet</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위에 let wizard 상수가 아닌 var wizard는 꼭 변수로 선언해야한다.</p>\n<ul>\n<li>\n<p>willSet - 값이 저장되기 직전에 호출됩니다.</p>\n<p>ㄴ 암시적 매개변수 이름 (newValue)</p>\n</li>\n<li>\n<p>didSet - 새로운 값이 저장된 직후에 호출됩니다.</p>\n<p>ㄴ 암시적 매개변수 이름 (oldValue)</p>\n</li>\n</ul>\n<h4 id=\"lazy-variable-vs-computed-properties\"><a href=\"#lazy-variable-vs-computed-properties\" aria-label=\"lazy variable vs computed properties permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Lazy Variable vs Computed Properties</h4>\n<p><strong>Lazy 변수</strong> 는</p>\n<ul>\n<li>상수(let)이 가능</li>\n<li>Expensive to calculate</li>\n<li>Might not be used by every instance</li>\n</ul>\n<p>즉, 처음 사용되지 전까지는 로드되지 않다가 사용하고자 할 때 불러올 수 있는 것이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">struct</span> <span class=\"token builtin\">Sample</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> mutableProperty<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Int</span> <span class=\"token operator\">=</span> <span class=\"token number\">100</span>  <span class=\"token comment\">// 가변 프로퍼티</span>\n  <span class=\"token keyword\">let</span> immutableProperty<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Int</span> <span class=\"token operator\">=</span> <span class=\"token number\">100</span>  <span class=\"token comment\">// 불변 프로퍼티</span>\n\n  <span class=\"token keyword\">static</span> <span class=\"token keyword\">var</span> typeProperty<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Int</span> <span class=\"token operator\">=</span> <span class=\"token number\">100</span> <span class=\"token comment\">// 타입 프로퍼티</span>\n\n  <span class=\"token comment\">// 인스턴스 메서드</span>\n  <span class=\"token keyword\">func</span> <span class=\"token function\">instanceMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"instance method\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// 타입 메서드</span>\n  <span class=\"token keyword\">static</span> <span class=\"token keyword\">func</span> <span class=\"token function\">typeMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"type method\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 구조체 사용</span>\n\n<span class=\"token comment\">// 가변 인스턴스</span>\n<span class=\"token keyword\">var</span> mutable<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Sample</span> <span class=\"token operator\">=</span> <span class=\"token function\">Sample</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\nmutable<span class=\"token punctuation\">.</span>mutableProperty <span class=\"token operator\">=</span> <span class=\"token number\">200</span>\n<span class=\"token comment\">//mutable.immutableProperty = 200  //error</span>\n\n<span class=\"token comment\">// 불변 인스턴스</span>\n<span class=\"token keyword\">let</span> immutable<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Sample</span> <span class=\"token operator\">=</span> <span class=\"token function\">Sample</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">//immutable.mutableProperty = 200\t\t//error</span>\n<span class=\"token comment\">//immutable.immutableProperty = 200\t//error</span>\n\n<span class=\"token comment\">// 타입 프로퍼티 및 메서드</span>\n<span class=\"token builtin\">Sample</span><span class=\"token punctuation\">.</span>typeProperty <span class=\"token operator\">=</span> <span class=\"token number\">400</span>\n<span class=\"token builtin\">Sample</span><span class=\"token punctuation\">.</span><span class=\"token function\">typeMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">//mutable.typeProperty = 400\t//error</span>\n<span class=\"token comment\">//mutable.typeMethod()\t\t//error</span></code></pre></div>\n<p>구조체를 이용해 인스턴스를 생성할 때,</p>\n<p>가변 인스턴스 —> 가변 프로퍼티  O</p>\n<p>가변 인스턴스 —> 불변 프로퍼티 X</p>\n<p>불변 인스턴스 —> 가변 프로퍼티 X</p>\n<p>불변 인스턴스 —> 불변 프로퍼티 X</p>\n<p>타입 프로퍼티 &#x26; 메소드는 인스턴스 생성 X</p>\n<h2 id=\"method\"><a href=\"#method\" aria-label=\"method permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Method</h2>\n<p>what structure does (methods perform work)</p>\n<p>Swift 4.2</p>\n<ul>\n<li>\n<p><strong>enumeration</strong> (열거형)</p>\n<p>CaseIterable (프로토콜)은 enum의 모든 case를 배열 속성으로 자동 생성시켜줍니다. 컴파일할 때, enum의 모든 case를 배열로 표현해주는 allCases 속성으로 내가 정한 순서로 자동으로 생성됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">enum</span> <span class=\"token builtin\">Weekday</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">CaseItable</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">case</span> monday<span class=\"token punctuation\">,</span> tuesday<span class=\"token punctuation\">,</span> wednesday<span class=\"token punctuation\">,</span> thursday<span class=\"token punctuation\">,</span> friday<span class=\"token punctuation\">,</span> saturday<span class=\"token punctuation\">,</span> sunday\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token builtin\">Weekday</span><span class=\"token punctuation\">.</span>allCases\n<span class=\"token comment\">// [monday, tuesday, wednesday, thursday, friday, saturday, sunday]</span></code></pre></div>\n</li>\n</ul>\n<ul>\n<li>\n<p><strong>mutating</strong></p>\n<p>swift에서   </p>\n<p>클래스(classes)는 reference type,  </p>\n<p>구조체(structures)와 열거형(enumerations)은 value type이다.  </p>\n<p>이 때, value types의 프로퍼티들은 인스턴스 메서드 안에서 변경될 수 없다. 값 타입의 프로퍼티를 변경하기 위해서 인스턴스 메서드에 <strong>mutating</strong> keyword를 사용해야 한다. 이 mutating 키워드를 가진 메서드는 프로퍼티의 값을 변경할 수 있고, 메서드 구현이 끝나면 원래 구조체로 돌아가 그 메서드를 사용할 수 있다.</p>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">struct</span> <span class=\"token builtin\">Stack</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">private</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">set</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">var</span> items <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">mutating</span> <span class=\"token keyword\">func</span> <span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">_</span> item<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    items<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">mutating</span> <span class=\"token keyword\">func</span> <span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">Int</span><span class=\"token operator\">?</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token operator\">!</span>items<span class=\"token punctuation\">.</span><span class=\"token builtin\">isEmpty</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> items<span class=\"token punctuation\">.</span><span class=\"token function\">removeLast</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token constant\">nil</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> stack <span class=\"token operator\">=</span> <span class=\"token function\">Stack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nstack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\nstack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">78</span><span class=\"token punctuation\">)</span>\nstack<span class=\"token punctuation\">.</span>items\t<span class=\"token comment\">// [4, 78]</span>\nstack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nstack<span class=\"token punctuation\">.</span>items\t<span class=\"token comment\">// [4]</span></code></pre></div>\n<h4 id=\"computed-properties-vs-methods\"><a href=\"#computed-properties-vs-methods\" aria-label=\"computed properties vs methods permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Computed Properties vs Methods</h4>\n<p>Extensive computation or DB access ?</p>\n<ul>\n<li>Yes : Method</li>\n<li>No : Computed Property</li>\n</ul>\n<p>구조체 vs 클래스</p>\n<p>구조체는 ?</p>\n<ul>\n<li>연관된 몇몇의 값들을 모아서 하나의 데이터 타입으로 표현하고 싶을 때</li>\n<li>다른 객체 또는 함수 등으로 전달될 때 참조가 아닌 복사를 원할 때</li>\n<li>자신을 상속할 필요가 없거나, 자신이 다른 타입을 상속받을 필요가 없을 때</li>\n<li>Apple 프레임워크에서 프로그래밍을 할 때에는 주로 클래스를 많이 사용</li>\n</ul>\n<br>\n<br>\n<br>\n<p>참고 :</p>\n<p>Raywenderlich.com</p>\n<p><a href=\"https://medium.com/the-andela-way/swift-understanding-mutating-functions-in-two-minutes-d9e363904e3a\">Swift:Understanding Mutating Functions</a></p>","fields":{"slug":"/posts/swift-structures/","tagSlugs":["/tag/i-os/","/tag/swift/","/tag/structure/"]},"frontmatter":{"date":"2019-05-15T14:00:00.169Z","description":"","tags":["iOS","Swift","Structure"],"title":"[Swift] Structure(구조체)"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/swift-structures/"}}