{"data":{"site":{"siteMetadata":{"author":{"name":"Kingso","contacts":{"twitter":"#"}},"disqusShortname":"kingsoblog","subtitle":"Kingso's blog","title":"Kingso's blog","url":"https://kingso.netlify.com"}},"markdownRemark":{"id":"3f1d2b77-532b-593c-b207-76b959c5b5e2","html":"<br>\n<h2 id=\"오늘의-til\"><a href=\"#%EC%98%A4%EB%8A%98%EC%9D%98-til\" aria-label=\"오늘의 til permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>오늘의 TIL</h2>\n<ul>\n<li>\n<p><a href=\"#%EC%A0%95%EA%B7%9C%ED%91%9C%ED%98%84%EC%8B%9D\">정규표현식</a></p>\n</li>\n<li>\n<p><a href=\"#String%EC%97%90%EC%84%9C-Number%EB%A1%9C-%EB%B3%80%ED%99%98\">String에서 Number로 변환</a></p>\n</li>\n<li>\n<p><a href=\"#Array.map()\">Array.map()</a></p>\n</li>\n<li>\n<p><a href=\"#%ED%8B%B8%ED%8A%B8-%EC%97%B0%EC%82%B0%EC%9E%90(~,-%EB%AC%BC%EA%B2%B0)\">틸트 연산자(~, 물결)</a></p>\n</li>\n</ul>\n<br>\n<h4 id=\"정규표현식\"><a href=\"#%EC%A0%95%EA%B7%9C%ED%91%9C%ED%98%84%EC%8B%9D\" aria-label=\"정규표현식 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>정규표현식</h4>\n<p>정규표현식은 워낙 광범위하므로, 자신이 나타내고자 하는 표현식을 작성하면 된다.</p>\n<p>링크 : <a href=\"https://developer.mozilla.org/ko/docs/Web/JavaScript/Guide/%EC%A0%95%EA%B7%9C%EC%8B%9D\">https://developer.mozilla.org/ko/docs/Web/JavaScript/Guide/%EC%A0%95%EA%B7%9C%EC%8B%9D</a></p>\n<p>짧고 간단한 예로 내가 오늘 배운 표현식에 대해 해석해보고자 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">var phone_number = &quot;01022229999&quot;;\nvar reg = /\\d(?=\\d{4})/g;\n\nconsole.log(phone_number.replace(reg, &quot;*&quot;));</code></pre></div>\n<p>위의 예제의 정규표현식을 해석해보면, 정규표현식은 / … / 슬래시 사이에 표현됩니다. \\d 는 숫자문자에 대응되고, (?=\\d{4})는 괄호 안에서 4개의 양의 정수를 의미합니다. {} 대괄호 안에 들어오는 숫자는 반드시 양의 정수이어야 합니다. 마지막으로 g는 플래를 사용한 고급검색으로 g 플래그는 전역 검색을 뜻합니다.</p>\n<br>\n<h4 id=\"string에서-number로-변환\"><a href=\"#string%EC%97%90%EC%84%9C-number%EB%A1%9C-%EB%B3%80%ED%99%98\" aria-label=\"string에서 number로 변환 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>String에서 Number로 변환</h4>\n<p>자바스크립트에서 String을 Number 타입으로 변환하는 방법과 Number를 String 타입으로 변환하는 방법은 다양합니다. 그 중에서 새로 알게된 몇가지를 추가해서 작성해보려고 합니다.</p>\n<p><strong>1. String to Number</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">var string = &quot;33&quot;;\n\n1) string*=1;\n\n2) Number(string)\n\n3) parseInt(string)\n\n4) parseFloat(string) // 실수를 원하는 경우 사용\n\n5) +string</code></pre></div>\n<p>한 눈에 보기 쉽게 하기 위해서 console.log()를 생략하여 작성했습니다. 위의 예제의 타입을 확인하고 싶은 경우에는 “console.log(typeof(string*=1));” 이런식으로 확인해볼 수 있습니다.</p>\n<p>위의 예제 중에서 오늘 새롭게 알게 된 ‘5) +string’ 은 정말 짧고 간결하게 변환할 수 있는 방법이라고 생각합니다.</p>\n<br>\n<p><strong>2. Number to String</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">var num = 33;\n\n1) num += &quot;&quot;\n\n2) num.toString()\n\n3) String(num)</code></pre></div>\n<p>간결하게 코드를 작성하기 위해서 많은 사람들이 1)번 방법을 많이 사용하는 것 같습니다.</p>\n<br>\n<h4 id=\"arraymap\"><a href=\"#arraymap\" aria-label=\"arraymap permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Array.map()</h4>\n<p>array의 map 메소드는 callback 함수로 배열의 각 원소들을 순서대로 불러, 원하는 작업을 한 후, 새로운 배열 결과를 반환하는 함수입니다.</p>\n<p>기억하기 쉽도록 간단한 예제를 작성해봅시다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">var arr = [1, 4, 9, 16];\n\nconst map1 = arr.map(v =&gt; v * 2);\n\nconsole.log(map1); // [2, 8, 18, 32]</code></pre></div>\n<br>\n<h4 id=\"틸트-연산자-물결\"><a href=\"#%ED%8B%B8%ED%8A%B8-%EC%97%B0%EC%82%B0%EC%9E%90-%EB%AC%BC%EA%B2%B0\" aria-label=\"틸트 연산자 물결 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>틸트 연산자(~, 물결)</h4>\n<p>0과 1을 모두 뒤집는 Bitwise NOT 연산자이다. “~0101”는 “1010”이 된다.</p>\n<p>그런데 이걸 인덱스 비교, 값 유무 등 오묘한 방식으로 사용하기도 하는 것 같다.</p>\n<p>|| (OR 연산자) 또한 자바스크립트에서 일반적으로 사용하는 트릭인 것 같습니다.</p>\n<p>예제를 한 번 보면,</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">var arr = [1,3,2,5,4];\n\nfunction solution(d, budget){\n return ~(~d.sort((a,b)=&gt;a-b).map(v =&gt; budget-=v).findIndex(v =&gt; v&lt;0) || ~d.length);\n}\n\nconsole.log(solution(arr, 9));</code></pre></div>\n<p>위의 코드는 ‘프로그래머스 level1 예산’ 문제의 다른 사람 풀이입니다. 제가 해석한 바로는 “d.sort((a,b)=>a-b).map(v => budget-=v).findIndex(v => v&#x3C;0)” 이 부분에 값이 있다면 OR연산자를 기준으로 앞부분의 값을, 그 부분에 값이 없다면 OR 연산자를 기준으로 뒷부분의 값으로 결과를 처리한다.</p>","fields":{"slug":"/posts/TIL1/","tagSlugs":["/tag/javascript/","/tag/정규표현식/","/tag/map/"]},"frontmatter":{"date":"2019-07-02T14:00:00.169Z","description":"Javascipt 정규표현식 / String <-> Int / Array.map","tags":["javascript","정규표현식","map"],"title":"[TIL-1]"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/TIL1/"}}