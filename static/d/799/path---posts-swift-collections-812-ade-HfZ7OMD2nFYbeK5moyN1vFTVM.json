{"data":{"site":{"siteMetadata":{"author":{"name":"Kingso","contacts":{"twitter":"#"}},"disqusShortname":"kingsoblog","subtitle":"Kingso's blog","title":"Kingso's blog","url":"https://kingso.netlify.com"}},"markdownRemark":{"id":"3c0205c8-9b11-5e7b-83c3-b3351ecfb9f6","html":"<h1 id=\"collections\"><a href=\"#collections\" aria-label=\"collections permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Collections</h1>\n<ul>\n<li>\n<p><a href=\"#array\">Array</a>  </p>\n</li>\n<li>\n<p><a href=\"#dictionary\">Dictionary</a>  </p>\n</li>\n<li>\n<p><a href=\"#set\">Set</a>  </p>\n</li>\n<li>\n<p><a href=\"#closure\">Closure</a>  </p>\n</li>\n</ul>\n<h2 id=\"array\"><a href=\"#array\" aria-label=\"array permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Array</h2>\n<p>순서가 있고, 중복을 허용한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">var</span> foods<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"donut\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"pizza\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"chicken\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"cookie\"</span><span class=\"token punctuation\">]</span>\n\nfoods<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>                <span class=\"token comment\">//\"donut\"</span>\nfoods<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span>        <span class=\"token comment\">//[\"pizza\",\"chicken\",\"cookie\"]</span></code></pre></div>\n<p>배열의 인덱스를 사용해서 원소를 알 수 있다.  </p>\n<p>배열의 인덱스는 0부터 시작한다.  </p>\n<p><strong>append</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\">foods<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hamburger\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>새로운 원소를 배열의 끝에 추가하는 메소드이다.  </p>\n<p>foods는 [“donut”, “pizza”, “chicken”, “cookie”, “hamburger”] 가 된다.</p>\n<p><strong>insert</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\">foods<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Apple\"</span><span class=\"token punctuation\">,</span> at<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>새로운 원소를 원하는 위치에 삽입하는 메소드이다.</p>\n<p>foods는 [“donut”, “Apple”, “pizza”, “chicken”, “cookie”, “hamburger”] 가 된다.  </p>\n<p><strong>count</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\">foods<span class=\"token punctuation\">.</span><span class=\"token builtin\">count</span>        <span class=\"token comment\">//6</span></code></pre></div>\n<p>배열의 원소 개수를 반환해주는 메소드이다.   </p>\n<p>여기선 원소를 6개 가지고 있으므로 6을 반환한다.  </p>\n<p><strong>first</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\">foods<span class=\"token punctuation\">.</span><span class=\"token builtin\">first</span>        <span class=\"token comment\">//\"donut\"</span></code></pre></div>\n<p>배열의 첫번째 원소를 반환해주는 메소드이다.  </p>\n<p>foods 배열의 첫번째 원소인 “donut”을 반환한다.  </p>\n<p><strong>min</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\">foods<span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>        <span class=\"token comment\">//\"Apple\"</span></code></pre></div>\n<p>배열의 최솟값을 반환해주는 메소드이다.  </p>\n<p>String은 A~Z~a~b 순서로 커진다.   </p>\n<p>A &#x3C; Z &#x3C; a &#x3C; b  </p>\n<p>따라서 foods 배열의 min 원소는 “Apple” 이다.  </p>\n<p><strong>max</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\">foods<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>        <span class=\"token comment\">//\"pizza\"</span></code></pre></div>\n<p>배열의 최댓값을 반환해주는 메소드이다.  </p>\n<p>foods 배열의 max 원소는 ” pizza” 이다.  </p>\n<p><strong>contains</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\">foods<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pizza\"</span><span class=\"token punctuation\">)</span>        <span class=\"token comment\">//true</span>\nfoods<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pasta\"</span><span class=\"token punctuation\">)</span>        <span class=\"token comment\">//false</span></code></pre></div>\n<p>배열이 주어진 원소를 가지고 있는지 Boolean 값을 반환하는 메소드이다.  </p>\n<p><strong>swapAt</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\">foods<span class=\"token punctuation\">.</span><span class=\"token function\">swapAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>        </code></pre></div>\n<p>원하는 위치의 원소들을 바꿔주는 메소드이다.  </p>\n<p>배열의 index 1의 원소와 index 3의 원소를 바꿔  [“donut”, “chicken”, “pizza”, “Apple”, “cookie”, “hamburger”] 가 된다.  </p>\n<p><strong>enumerated</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">,</span> food<span class=\"token punctuation\">)</span> <span class=\"token keyword\">in</span> foods<span class=\"token punctuation\">.</span><span class=\"token function\">enumerated</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">,</span> food<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>food의 값에 해당하는 index를 0부터 표현해주는 메소드이다.  </p>\n<p>위의 코드를 실행하면, console 창에 아래와 같이 결과가 나올 것이다.  </p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token number\">0</span> donut\n<span class=\"token number\">1</span> chicken\n<span class=\"token number\">2</span> pizza\n<span class=\"token number\">3</span> <span class=\"token builtin\">Apple</span>\n<span class=\"token number\">4</span> cookie\n<span class=\"token number\">5</span> hamburger</code></pre></div>\n<p><strong>remove</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\">foods<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>at<span class=\"token punctuation\">:</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>        <span class=\"token comment\">//\"cookie\"</span></code></pre></div>\n<p>원하는 위치의 원소를 삭제하는 메소드이다.  </p>\n<p><strong>removeLast</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\">foods<span class=\"token punctuation\">.</span><span class=\"token function\">removeLast</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>    <span class=\"token comment\">//\"hamburger\"</span></code></pre></div>\n<p>배열의 끝에 있는 원소를 삭제하는 메소드이다.  </p>\n<p><strong>removeAll</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\">foods<span class=\"token punctuation\">.</span><span class=\"token function\">removeAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>array의 모든 원소를 삭제한다.  </p>\n<p><strong>isEmpty</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\">foods<span class=\"token punctuation\">.</span><span class=\"token builtin\">isEmpty</span></code></pre></div>\n<p>array가 비어있는지 확인한다.  </p>\n<h2 id=\"dictionary\"><a href=\"#dictionary\" aria-label=\"dictionary permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Dictionary</h2>\n<p>key와 value로 이루어져 순서가 없고, key 값은 유일해야 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">var</span> emptyDictionary<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">var</span> namesAndAnimals <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n<span class=\"token string\">\"Tom\"</span> <span class=\"token punctuation\">:</span> <span class=\"token string\">\"🐶 Dog\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token string\">\"Lisa\"</span> <span class=\"token punctuation\">:</span> <span class=\"token string\">\"🐱 Cat\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token string\">\"John\"</span> <span class=\"token punctuation\">:</span> <span class=\"token string\">\"🐰 Rabbit\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token string\">\"Ann\"</span> <span class=\"token punctuation\">:</span> <span class=\"token string\">\"🐷 Pig\"</span>\n<span class=\"token punctuation\">]</span>\n\nnamesAndAnimals<span class=\"token punctuation\">[</span><span class=\"token string\">\"Tom\"</span><span class=\"token punctuation\">]</span>        <span class=\"token comment\">//🐶 Dog</span>\nnamesAndAnimals<span class=\"token punctuation\">[</span><span class=\"token string\">\"Bob\"</span><span class=\"token punctuation\">]</span>        <span class=\"token comment\">//nil</span></code></pre></div>\n<p><strong>Dictionary 값을 추가</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\">namesAndAnimals<span class=\"token punctuation\">[</span><span class=\"token string\">\"Bob\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"🐵 monkey\"</span></code></pre></div>\n<p><strong>Dictionary 값을 변경하거나 추가</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\">namesAndAnimals<span class=\"token punctuation\">.</span><span class=\"token function\">updateValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Tiger\"</span><span class=\"token punctuation\">,</span> forkey<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Lisa\"</span><span class=\"token punctuation\">)</span>\nnamesAndAnimals<span class=\"token punctuation\">[</span><span class=\"token string\">\"Lisa\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"🐯 Tiger\"</span></code></pre></div>\n<ol>\n<li>\n<p>updateValue 메소드를 이용해 값을 변경</p>\n</li>\n<li>\n<p>원하는 key 값을 이용해 값을 변경</p>\n</li>\n</ol>\n<p><strong>Dictionary 값을 삭제</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\">namesAndAnimals<span class=\"token punctuation\">.</span><span class=\"token function\">removeValue</span><span class=\"token punctuation\">(</span>forKey<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Ann\"</span><span class=\"token punctuation\">)</span>\nnamesAndAnimals<span class=\"token punctuation\">[</span><span class=\"token string\">\"Ann\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token constant\">nil</span></code></pre></div>\n<ol>\n<li>\n<p>removeValue 메소드를 이용해 값을 삭제</p>\n</li>\n<li>\n<p>원하는 key 값에 nil을 할당해 값을 삭제</p>\n</li>\n</ol>\n<p><strong>Dictionary 모든 key, value 출력</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> animal<span class=\"token punctuation\">)</span> <span class=\"token keyword\">in</span> namesAndAnimals <span class=\"token punctuation\">{</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"<span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>name<span class=\"token delimiter variable\">)</span></span> has a <span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>animal<span class=\"token delimiter variable\">)</span></span>\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>namesAndAnimals은 [key: value] 형태이다.</p>\n<p>각각 key는 name에, value는 animal에 할당되어 모든 원소들을 출력한다.</p>\n<p><strong>Dictionary key만 출력</strong></p>\n<ol>\n<li>_(underscore) 이용</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> <span class=\"token number\">_</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">in</span> namesAndAnimals <span class=\"token punctuation\">{</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ol start=\"2\">\n<li>keys 메소드 사용</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">for</span> name <span class=\"token keyword\">in</span> namesAndAnimals<span class=\"token punctuation\">.</span>keys <span class=\"token punctuation\">{</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>Dictionary value만 출력</strong></p>\n<ol>\n<li>_(underscore) 이용</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token number\">_</span><span class=\"token punctuation\">,</span> animal<span class=\"token punctuation\">)</span> <span class=\"token keyword\">in</span> namesAndAnimals <span class=\"token punctuation\">{</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>animal<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ol start=\"2\">\n<li>values 메소드 사용</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">for</span> animal <span class=\"token keyword\">in</span> namesAndAnimals<span class=\"token punctuation\">.</span>values <span class=\"token punctuation\">{</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>animal<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"set\"><a href=\"#set\" aria-label=\"set permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Set</h2>\n<p>순서가 없고, 중복을 허용하지 않는다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">var</span> thisSet<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Set</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">Int</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span>        <span class=\"token comment\">//{3,1,2}</span>\n\nthisSet<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>            <span class=\"token comment\">//true</span>\nthisSet<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token number\">99</span><span class=\"token punctuation\">)</span>        <span class=\"token comment\">//false</span>\n\nthisSet<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>                <span class=\"token comment\">//{1,3,5,2}</span>\n\nthisSet<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>                <span class=\"token comment\">//{5,1,2}</span>\n\n<span class=\"token keyword\">let</span> thatSet<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Set</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">Int</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\">// intersection (교집합)</span>\n<span class=\"token keyword\">let</span> intersection <span class=\"token operator\">=</span> thisSet<span class=\"token punctuation\">.</span><span class=\"token function\">intersection</span><span class=\"token punctuation\">(</span>thatSet<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// difference (차집합)</span>\n<span class=\"token keyword\">let</span> difference <span class=\"token operator\">=</span> thisSet<span class=\"token punctuation\">.</span><span class=\"token function\">symmetricDifference</span><span class=\"token punctuation\">(</span>thatSet<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// union (합집합)</span>\n<span class=\"token keyword\">let</span> union <span class=\"token operator\">=</span> thisSet<span class=\"token punctuation\">.</span><span class=\"token function\">union</span><span class=\"token punctuation\">(</span>thatSet<span class=\"token punctuation\">)</span></code></pre></div>\n<h2 id=\"closure\"><a href=\"#closure\" aria-label=\"closure permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Closure</h2>\n<p>Closure은 <strong>anonymous function</strong> 이라고도 한다.</p>\n<p>일반 function과 비교해보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">typealias</span> <span class=\"token builtin\">Operate</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">Int</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">printOperationResult</span><span class=\"token punctuation\">(</span><span class=\"token number\">_</span> a<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">,</span> <span class=\"token number\">_</span> b<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">,</span> operation<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Operate</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token function\">operation</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Operation result is <span class=\"token interpolation\"><span class=\"token delimiter variable\">\\(</span>result<span class=\"token delimiter variable\">)</span></span>\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">printOperationResult</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> operation<span class=\"token punctuation\">:</span> add<span class=\"token punctuation\">)</span>    <span class=\"token comment\">//9</span></code></pre></div>\n<p>위의 add 함수를 closure로 만들어보자 !  </p>\n<p>3가지로 만들어 볼 수 있다.   </p>\n<p>첫 번째는, 파라미터의 데이터형, returun 타입을 다 적는 방법</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> add<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">Int</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">Int</span> <span class=\"token keyword\">in</span>\n<span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>두 번째는, 파라미터 데이터형, return 타입을 생략하는 방법</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> add<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">Int</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token keyword\">in</span>\na <span class=\"token operator\">+</span> b\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>세 번째는, 파라미터 이름을 사용하지 않고 각각의 파라미터를 숫자에 부여받는 방법</p>\n<p>이 방법은 짧은 코드로 구현할 수 있는 방법이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> add<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">Int</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n$<span class=\"token number\">0</span> <span class=\"token operator\">+</span> $<span class=\"token number\">1</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>또한, **Closure은 자신의 범위 안에서 변수나 상수의 기능에 가깝게 사용할 수 있다.  **</p>\n<p>그 뜻은 변수나 상수처럼 값을 저장하거나 조작할 수 있다는 의미이다.  </p>\n<p>간단한 예제를 보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">var</span> <span class=\"token builtin\">count</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n<span class=\"token keyword\">let</span> increamentCount <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n<span class=\"token builtin\">count</span> <span class=\"token operator\">+</span><span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">incrementCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">incrementCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">incrementCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">count</span><span class=\"token punctuation\">)</span>            <span class=\"token comment\">// 3</span></code></pre></div>\n<p>incrementCount가 3번 호출되면서 count 값은 3이 된다.</p>\n<h2 id=\"closures--collections\"><a href=\"#closures--collections\" aria-label=\"closures  collections permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Closures &#x26; Collections</h2>\n<p>위에 설명된 Collections(Array, Dictionary, Set)과 Closures을 어떻게 같이 사용할 수 있는지 알아보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">var</span> foods <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"banana\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"pizza\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"chicken\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"hamburger\"</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p><strong>sort() 와 sort(by: )</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token comment\">//Default는 오름차순</span>\nfoods<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">//내림차순 정렬을 하기 위해 closure을 사용</span>\nfoods<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>by<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">Bool</span> <span class=\"token keyword\">in</span>\na <span class=\"token operator\">></span> b\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>오름차순으로 하면,  [“banana”, “chicken”, “hamburger”, “pizza”] ,  </p>\n<p>내림차순으로 하면, [“pizza”, “hamburger”, “chicken”, “banana”] 이다.</p>\n<p><strong>sorted() 와 sorted(by: )</strong></p>\n<p>원하는 조건에 맞는 정렬을 하기 위해 사용하는 메소드이다.  </p>\n<p>문자 길이가 긴 순서대로 정렬하게 만들어 보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> longToShortStrings <span class=\"token operator\">=</span> foods<span class=\"token punctuation\">.</span><span class=\"token builtin\">sorted</span> <span class=\"token punctuation\">{</span>\n$<span class=\"token number\">0</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">count</span> <span class=\"token operator\">></span> $<span class=\"token number\">1</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">count</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>[“hamburger”, “chicken”, “banana”, “pizza”] 로 긴 문자 순서대로 출력된다.</p>\n<h4 id=\"filter\"><a href=\"#filter\" aria-label=\"filter permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>filter</h4>\n<p>Collection 내부의 값을 걸러서 추출한다.</p>\n<p>for문을 사용한 5보다 큰 원소를 찾는 로직이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">var</span> numbers <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">var</span> filterResult<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">for</span> number <span class=\"token keyword\">in</span> numbers <span class=\"token keyword\">where</span> number <span class=\"token operator\">></span> <span class=\"token number\">5</span> <span class=\"token punctuation\">{</span>\nfilterResult<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>number<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>filterResult<span class=\"token punctuation\">)</span>        <span class=\"token comment\">//[6, 9]</span></code></pre></div>\n<p>위에 주어진 for문을 사용하지 않고, 같은 로직으로 filter를 적용해보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> filterResult2 <span class=\"token operator\">=</span> numbers<span class=\"token punctuation\">.</span><span class=\"token builtin\">filter</span> <span class=\"token punctuation\">{</span> number <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">Bool</span> <span class=\"token keyword\">in</span>\n<span class=\"token keyword\">return</span> number <span class=\"token operator\">></span> <span class=\"token number\">5</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위에 코드보다 더 짧게 한 줄로 축약할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> filterResult3 <span class=\"token operator\">=</span> number<span class=\"token punctuation\">.</span><span class=\"token builtin\">filter</span> <span class=\"token punctuation\">{</span> $<span class=\"token number\">0</span> <span class=\"token operator\">></span> <span class=\"token number\">5</span> <span class=\"token punctuation\">}</span></code></pre></div>\n<h4 id=\"map\"><a href=\"#map\" aria-label=\"map permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>map</h4>\n<p>Collection 내부의 기존 데이터를 변형하여 새로운 collection을 생성한다.</p>\n<p>for문을 사용한 배열의 값들을 2배로 만드는 로직이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">var</span> numbers <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">var</span> <span class=\"token builtin\">DoubleNumbers</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">for</span> number <span class=\"token keyword\">in</span> numbers <span class=\"token punctuation\">{</span>\n<span class=\"token builtin\">DoubleNumbers</span><span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>number <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">DoubleNumbers</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>위에 주어진 for문을 사용하지 않고, 같은 로직으로 map을 적용해보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> doubleNumber <span class=\"token operator\">=</span> numbers<span class=\"token punctuation\">.</span><span class=\"token builtin\">map</span> <span class=\"token punctuation\">{</span> number <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">Int</span> <span class=\"token keyword\">in</span>\n<span class=\"token keyword\">return</span> number <span class=\"token operator\">*</span> <span class=\"token number\">2</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// [10, 4, 12, 18, 8, 2]</span></code></pre></div>\n<p>map을 통해 numbers의 원소 하나하나에 변형을 줘서 기존 원소에 2배를 한 새로운 배열이 만들어진다.</p>\n<h4 id=\"reduce\"><a href=\"#reduce\" aria-label=\"reduce permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>reduce</h4>\n<p>Collection 내부의 모든 내용을 하나로 통합해주는 기능을 한다.</p>\n<blockquote>\n<p>Array 인 경우에 reduece를 사용하는 예제를 알아보자.</p>\n</blockquote>\n<p>for문을 사용한 배열의 값들을 다 더하는 로직이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> numbers <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">var</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n<span class=\"token keyword\">for</span> number <span class=\"token keyword\">in</span> numbers <span class=\"token punctuation\">{</span>\nsum <span class=\"token operator\">+</span><span class=\"token operator\">=</span> number\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>sum<span class=\"token punctuation\">)</span>        <span class=\"token comment\">//27</span></code></pre></div>\n<p>위에 주어진 for문을 사용하지 않고, 같은 로직으로 reduce를 적용해보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> reduceResult <span class=\"token operator\">=</span> numbers<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">,</span> number<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">Int</span> <span class=\"token keyword\">in</span>\n<span class=\"token keyword\">return</span> result <span class=\"token operator\">+</span> number\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>reduceResult<span class=\"token punctuation\">)</span>        <span class=\"token comment\">//27</span></code></pre></div>\n<p>.reduce(0)에 0은 초기값으로  result 초기값이 0을 의미합니다.</p>\n<p>정수 배열의 모든 값을 더한 값이 출력됩니다.</p>\n<p>위에 코드보다 더 짧게 한 줄로 축약할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> reduceResult2 <span class=\"token operator\">=</span> numbers<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">+</span><span class=\"token punctuation\">)</span></code></pre></div>\n<blockquote>\n<p>이제 Dictionary 인 경우에 reduece를 사용하는 예제를 알아보자.</p>\n</blockquote>\n<p>먼저, for문을 사용해 수량에 따른 가격을 가지는 로직이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">var</span> store <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1000</span><span class=\"token punctuation\">:</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5000</span><span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">:</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2500</span><span class=\"token punctuation\">:</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1800</span><span class=\"token punctuation\">:</span> <span class=\"token number\">30</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">var</span> resultForStoreValues<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>price<span class=\"token punctuation\">,</span> quantity<span class=\"token punctuation\">)</span> <span class=\"token keyword\">in</span> store <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">let</span> value <span class=\"token operator\">=</span> price <span class=\"token operator\">*</span> <span class=\"token function\">Int</span><span class=\"token punctuation\">(</span>quantity<span class=\"token punctuation\">)</span>\nresultForStoreValues<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>resultForStoreValues<span class=\"token punctuation\">)</span></code></pre></div>\n<p>위에 주어진 for문을 사용하지 않고, 같은 로직으로 reduce를 적용해보자.</p>\n<p>이번엔 배열인 경우에 사용했던 메소드 대신, 아래의 메소드를 사용한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">func</span> <span class=\"token builtin\">reduce</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">Result</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>into initialResult<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Result</span><span class=\"token punctuation\">,</span> <span class=\"token number\">_</span> updateAccumulatingResult<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">inout</span> <span class=\"token builtin\">Result</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">rethrows</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">Result</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> storeValues2 <span class=\"token operator\">=</span> store<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span>into<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> result<span class=\"token punctuation\">,</span> pair <span class=\"token keyword\">in</span>\nresult<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>pair<span class=\"token punctuation\">.</span>key <span class=\"token operator\">*</span> <span class=\"token function\">Int</span><span class=\"token punctuation\">(</span>pair<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>storeValues2<span class=\"token punctuation\">)</span></code></pre></div>\n<p><em>➤ String 배열인 경우,   stringArray.reduce(\"\") 해주면 된다.</em></p>\n<h4 id=\"compactmap\"><a href=\"#compactmap\" aria-label=\"compactmap permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>compactMap</h4>\n<p>compactMap은 nil 값을 필터링 해준다.</p>\n<p>for문을 사용해 배열의 원소들을 Int 형으로 변환했을 때, int 형이 되는지 찾는 로직이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> userInput <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"letter\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"3.14\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"33\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"three\"</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">var</span>  validInput<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">for</span> input <span class=\"token keyword\">in</span> userInput <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">guard</span> <span class=\"token keyword\">let</span> input <span class=\"token operator\">=</span> <span class=\"token function\">Int</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">)</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">continue</span>\n<span class=\"token punctuation\">}</span>\nvalidInput<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>validInput<span class=\"token punctuation\">)</span>        <span class=\"token comment\">//[33]</span></code></pre></div>\n<p>위에 주어진 for문을 사용하지 않고, 같은 로직으로 compactMap을 적용해보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> validInput2 <span class=\"token operator\">=</span> userInput<span class=\"token punctuation\">.</span>compactMap <span class=\"token punctuation\">{</span> input <span class=\"token keyword\">in</span>\n<span class=\"token function\">Int</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>validInput2<span class=\"token punctuation\">)</span>        <span class=\"token comment\">//[33]</span></code></pre></div>\n<h4 id=\"flatmap\"><a href=\"#flatmap\" aria-label=\"flatmap permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>flatMap</h4>\n<p>여러 배열을 한 개의 배열로 평평하게 만들 때 사용</p>\n<p>for문을 사용해 알파벳 “M” 이후로 시작되는 이름을 가진 원소들을 찾는 로직이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> arrayOfDwarf <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n<span class=\"token punctuation\">[</span><span class=\"token string\">\"Sleepy\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Grumpy\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Doc\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">[</span><span class=\"token string\">\"Thorin\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Nori\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">var</span> dwarvesAfterM<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">for</span> dwarves <span class=\"token keyword\">in</span> arrayOfDwarf <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">var</span> dwarfAfterM<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">for</span> dwarf <span class=\"token keyword\">in</span> dwarves <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">if</span> dwarf <span class=\"token operator\">></span> <span class=\"token string\">\"M\"</span> <span class=\"token punctuation\">{</span>\ndwarfAfterM<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>dwarf<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\ndwarvesAfterM <span class=\"token operator\">+</span><span class=\"token operator\">=</span> dwarfAfterM\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>dwarvesAfterM<span class=\"token punctuation\">)</span></code></pre></div>\n<p>위에 주어진 for문을 사용하지 않고, 같은 로직으로 flatMap을 적용해보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> dwarvesAfterM2 <span class=\"token operator\">=</span> arrayOfDwarf<span class=\"token punctuation\">.</span>flatMap <span class=\"token punctuation\">{</span> dwarves <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">in</span>\n<span class=\"token keyword\">return</span> dwarves<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> dwarf <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">Bool</span> <span class=\"token keyword\">in</span>\ndwarf <span class=\"token operator\">></span> <span class=\"token string\">\"M\"</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위에 코드보다 더 짧게 축약해보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> dwarvesAfterM3 <span class=\"token operator\">=</span> arrayOfDwarf<span class=\"token punctuation\">.</span>flatMap <span class=\"token punctuation\">{</span>\n$<span class=\"token number\">0</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">filter</span> <span class=\"token punctuation\">{</span> $<span class=\"token number\">0</span> <span class=\"token operator\">></span> <span class=\"token string\">\"M\"</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>참고 : Raywenderlich.com</p>","fields":{"slug":"/posts/swift-collections/","tagSlugs":["/tag/i-os/","/tag/swift/","/tag/collection/"]},"frontmatter":{"date":"2019-05-14T14:00:00.169Z","description":"","tags":["iOS","Swift","Collection"],"title":"[Swift] Collection(컬렉션)"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/swift-collections/"}}