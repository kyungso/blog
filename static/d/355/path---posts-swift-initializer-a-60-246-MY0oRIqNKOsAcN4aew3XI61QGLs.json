{"data":{"site":{"siteMetadata":{"author":{"name":"Kingso","contacts":{"twitter":"#"}},"disqusShortname":"kingsoblog","subtitle":"Kingso's blog","title":"Kingso's blog","url":"https://kingso.netlify.com"}},"markdownRemark":{"id":"7c6967dd-785f-57a5-8ed6-404d20de837f","html":"<h1 id=\"initializer\"><a href=\"#initializer\" aria-label=\"initializer permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Initializer</h1>\n<h2 id=\"designated-init\"><a href=\"#designated-init\" aria-label=\"designated init permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Designated init</h2>\n<p>클래스에 반드시 1개 이상 필요한 초기화 이니셜라이저.  </p>\n<p>이 init은 클래스의 모든 프로퍼티가 초기화 될 수 있어야한다.</p>\n<h2 id=\"convenienct-init\"><a href=\"#convenienct-init\" aria-label=\"convenienct init permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>convenienct init</h2>\n<p>단독으로 모든 프로퍼티를 초기화할 수 없고, 일부 프로퍼티만 처리한 뒤 다른 Initializer를 이용해서 전체 초기화를 수행하는 보조 이니셜라이저</p>\n<p>클래스의 Designated init을 도와주는 역할을 한다.</p>\n<p>Designated init의 파라미터 중 일부를 기본값으로 설정해서, 이 convenience init안에서 Designated init을 호출하여 초기화를 진행할 수 있다.</p>\n<p><strong>그러니 convenience init을 사용하려면 Designated init이 꼭 먼저 선언되어야 한다.</strong></p>\n<p>또한, Swift의 이니셜라이저 규칙이 중,</p>\n<p>“convenience init은 같은 클래스에서 다른 이니셜라이저를 호출해야 한다.” 라는 규칙이 있다.</p>\n<p>아래에서 다시 자세히 살펴보자.</p>\n<p>—> 내생각은 convenience init은   </p>\n<ol>\n<li>superclass의 required된 init을 그대로 파라미터까지 override한 subclass의 required convenience init에서</li>\n</ol>\n<p>subclass의 프로퍼티들로 만들어놓은 init을 호출할 수 있게 해주는 기능.</p>\n<ol start=\"2\">\n<li>\n<p>convenience init은 무조건 자신의 class designated init(self.init)을 호출한다.</p>\n</li>\n<li>\n<p>required convenience init 은 superclass required init 이랑 파라미터까지 동일</p>\n</li>\n<li>\n<p>convenience init은 subclass만의 프로퍼티를 가지고 init 만들 때 사용</p>\n</li>\n</ol>\n<h3 id=\"initializer-chaining-이니셜라이저-연쇄\"><a href=\"#initializer-chaining-%EC%9D%B4%EB%8B%88%EC%85%9C%EB%9D%BC%EC%9D%B4%EC%A0%80-%EC%97%B0%EC%87%84\" aria-label=\"initializer chaining 이니셜라이저 연쇄 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Initializer Chaining (이니셜라이저 연쇄)</h3>\n<p>Designated init와 Convenience init의 관계를 간단하게 하기 위해  Swift는 다음 세가지 규칙을 적용했다.</p>\n<ul>\n<li>규칙 1. Designated init은 직접 관련있는 슈퍼클래스로부터 Designated init을 호출해야 한다.</li>\n<li>규칙 2. Convenience init은 같은 클래스에서 다른 init을 호출해야 한다.</li>\n<li>규칙 3. Convenience init은 Designated init으로 끝맺어야 한다.</li>\n</ul>\n<p>간단하게 다음 사항을 기억하면 된다.</p>\n<ul>\n<li>Designated init은 항상 위로 위임을 한다.</li>\n<li>Convenience init은 항상 가로질러 위임한다.</li>\n</ul>","fields":{"slug":"/posts/swift-initializer/","tagSlugs":["/tag/i-os/","/tag/swift/","/tag/initializer/"]},"frontmatter":{"date":"2019-05-22T14:00:00.169Z","description":"","tags":["iOS","Swift","Initializer"],"title":"[Swift] Initializer(생성자)"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/swift-initializer/"}}