{"data":{"site":{"siteMetadata":{"author":{"name":"Kingso","contacts":{"twitter":"#"}},"disqusShortname":"kingsoblog","subtitle":"Kingso's blog","title":"Kingso's blog","url":"https://kingso.netlify.com"}},"markdownRemark":{"id":"33c68e7c-0ac4-5791-bf17-041e1757b1ef","html":"<br>\n<h2 id=\"오늘의-til\"><a href=\"#%EC%98%A4%EB%8A%98%EC%9D%98-til\" aria-label=\"오늘의 til permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>오늘의 TIL</h2>\n<ul>\n<li>\n<p><a href=\"#CSS-Module\">CSS Module</a></p>\n</li>\n<li>\n<p><a href=\"#Sass\">Sass</a></p>\n</li>\n<li>\n<p><a href=\"#styled-components\">styled-components</a></p>\n</li>\n</ul>\n<br>\n<h2 id=\"css-module\"><a href=\"#css-module\" aria-label=\"css module permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CSS Module</h2>\n<p>CSS Module은 CSS를 모듈화하여 사용하는 방식입니다.\nCSS 클래스를 만들면 자동으로 고유한 클래스네임을 생성하여 스코프를 지역적으로 제한합니다. 모듈화된 CSS를 webpack으로 불러오면 다음과 같이 사용자가 정의한 클래스네임과 고유화된 클래스네임으로 구성된 객체를 반환합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">{\n  box: &#39;src-App__box--mjrNr&#39;\n}</code></pre></div>\n<p>그리고 클래스를 적용할 때는 className = {styles.box} 방식으로 사용한다.</p>\n<br>\n<h4 id=\"css-module-활성화\"><a href=\"#css-module-%ED%99%9C%EC%84%B1%ED%99%94\" aria-label=\"css module 활성화 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CSS Module 활성화</h4>\n<p>CSS를 불러오는 과정에서 총 세 가지 로더를 사용합니다.</p>\n<ul>\n<li>\n<p>style-loader - 스타일을 불러와 웹페이지에서 활성화하는 역할</p>\n</li>\n<li>\n<p>css-loader - css 파일에서 import와 url문을 webpack의 require 기능으로 처리하는 역할</p>\n</li>\n<li>\n<p>postcss-loader - 모든 웹 브라우저에서 입력한 CSS 구문이 제대로 작동할 수 있도록 자동으로 -webkit, -mos, -ms 등 접두사를 붙여준다</p>\n</li>\n</ul>\n<br>\n<h4 id=\"클래스가-여러-개일-때\"><a href=\"#%ED%81%B4%EB%9E%98%EC%8A%A4%EA%B0%80-%EC%97%AC%EB%9F%AC-%EA%B0%9C%EC%9D%BC-%EB%95%8C\" aria-label=\"클래스가 여러 개일 때 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>클래스가 여러 개일 때</h4>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">src/App.CSS\n\n.box {\n  display: inline-block;\n  width: 100px;\n  height: 100px;\n}\n\n.blue {\n  background: blue;\n}</code></pre></div>\n<br>\n<p>[ 첫 번째 방법 ]</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">src/App.js\n\nimport React, { Component } from &#39;react&#39;;\nimport styles from &quot;./App.css&quot;;\n\nclass App extends Component {\n  render() {\n    return(\n      &lt;div className={[styles.box, styles.blue].join(&#39; &#39;)}&gt;\n      &lt;/div&gt;\n    );\n  }\n}\n\nexport default App;</code></pre></div>\n<br>\n<p>[두 번째 방법 - classNames]</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">import React, { Component } from &#39;react&#39;;\nimport classNames from &#39;classnames&#39;;\nimport styles from &#39;./App.css&#39;;\n\nclass App extends Component {\n  render() {\n    return (\n      &lt;div className={classNames(styles.box, styles.blue)}&gt;\n      &lt;/div&gt;\n    );\n  }\n}\n\nexport default App;</code></pre></div>\n<br>\n<p>[세 번째 방법 - classNames/bind]</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">import React, { Component } from &#39;react&#39;;\nimport classNames from &#39;classnames/bind&#39;;\nimport styles from &#39;./App.css&#39;;\n\nconst cx = classNames.bind(styles);\n\nclass App extends Component {\n  render() {\n    return (\n      &lt;div className={cx(&#39;box&#39;, &#39;blue&#39;)}&gt;\n      &lt;/div&gt;\n    );\n  }\n}\n\nexport default App;</code></pre></div>\n<p>CSS 코드는 수월하게 작성할 수 있지만, 프로젝트를 진행하다 보면 코드가 복잡해져 가독성이 쉽게 떨어질 수 있다.\n이런 CSS 결함은 SaaS, LESS, Stylus 등 CSS 전처리기 도구를 사용하여 해결할 수 있습니다.</p>\n<br>\n<br>\n<h2 id=\"sass\"><a href=\"#sass\" aria-label=\"sass permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Sass</h2>\n<p>Sass는 Syntactically awesome style sheets의 약어로, 문법적으로 매우 멋진 스타일시트를 의미합니다. Sass로는 CSS에서 사용할 수 있는 문법을 확장하여 중복되는 코드를 줄여 더욱 보기 좋게 작성할 수 있습니다. SaaS에 익숙하지 않다면 <a href=\"https://sass-guidelin.es/ko/\">https://sass-guidelin.es/ko/</a> 를 참고하세요.</p>\n<br>\n<h4 id=\"sass-사용\"><a href=\"#sass-%EC%82%AC%EC%9A%A9\" aria-label=\"sass 사용 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Sass 사용</h4>\n<ol>\n<li>\n<p>두 가지 패키지 설치</p>\n</li>\n<li>\n<p>node-sass - Sass로 작성된 코드들을 CSS로 변환하는 역할</p>\n</li>\n<li>\n<p>sass-loader - webpack에서 Sass파일을 읽어 오는 역할</p>\n</li>\n</ol>\n<br>\n<ol start=\"2\">\n<li>현재 선택자 참조</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">.box:hover {\n  background: red;\n}\n\n.box:active {\n  background: yellow;\n}</code></pre></div>\n<p>같은 내용을 Sass의 현재 선택자 참조 기능으로 작성할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">.box {\n  &amp;:hover {\n    background: red;\n  }\n  &amp;:active {\n    background: yellow;\n  }\n}</code></pre></div>\n<p>이런 식으로 감싸인 구조로 CSS를 작성할 수 있기 때문에 가독성이 훨씬 높습니다.</p>\n<br>\n<ol start=\"3\">\n<li>변수 사용</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$size: 100px;\n\n.box {\n  display: inline-block;\n  width: $size;\n  height: $size;\n}</code></pre></div>\n<br>\n<ol start=\"4\">\n<li>믹스인 사용</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$size: 100px;\n\n@mixin place-at-center() {\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n}\n\n.box {\n  display: inline-block;\n  width: $size;\n  height: $size;\n\n  @include place-at-center();\n}</code></pre></div>\n<br>\n<p>복잡한 상대 경로를 작성하는 것을 피하기 위해 webpack에서 sass-loader를 설정할 때는 includePaths를 설정해서 경로를 간소화할 수 있습니다. 이를 설정하려면 config/paths.js 파일에 style 경로를 넣어 주어야합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">config.paths.js\n\nmodule.exports = {\n  (...),\n  styles: resolveApp(&#39;src/styles&#39;)\n};</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">config/webpack.config.dev.js, webpack.config.prod.js\n\n{\n  loader: require.resolve(&#39;sass-loader&#39;),\n  options: {\n    includePaths: [paths.styles]\n  }\n}</code></pre></div>\n<p>설정을 마신 후에, webpack 개발 서버를 재시작해 보세요.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">@import &#39;utils&#39;;\n\n(...)</code></pre></div>\n<p>@import ’../../../styles/utils’ 상대 경로 대신, 위처럼 파일을 불러와 사용할 수 있습니다.</p>\n<br>\n<h4 id=\"sass-라이브러리\"><a href=\"#sass-%EB%9D%BC%EC%9D%B4%EB%B8%8C%EB%9F%AC%EB%A6%AC\" aria-label=\"sass 라이브러리 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Sass 라이브러리</h4>\n<p>Sass 장점 중 하나는 스타일 관련 라이브러리를 쉽게 불러와 사용할 수 있다는 것입니다.</p>\n<ul>\n<li>\n<p>include-media 믹스인 라이브러리 - 반응형 디자인을 도와줌</p>\n</li>\n<li>\n<p>open-color 변수 세트 라이브러리 - 색상 선택 도와줌 ($oc-색상 이름-명암, <a href=\"https://yeun.github.io/open-color\">https://yeun.github.io/open-color</a>)</p>\n</li>\n</ul>\n<br>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">src/styles/utils.Using_CSS_transitions\n\n@import &#39;~open-color/open-color&#39;;\n@import &#39;~include-media/dist/include-media&#39;;\n\n$breakpoints: (\n  small: 376px;\n  medium: 768px;\n  large: 1024px;\n  huge: 1200px;\n);\n\n$size: 100px;\n\n@mixin place-at-center() {\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n}</code></pre></div>\n<br>\n<p>npm 또는 yarn으로 설치한 패키지 내부에 있는 파일을 불러올 때는 ~ 문자를 사용해서 node_modules에 접근할 수 있습니다.</p>\n<p>그리고 $breakpoints 변수는 추후 반응형 디자인을 위한 코드를 작성할 때 기준점으로 사용합니다.</p>\n<br>\n<br>\n<h2 id=\"styled-components\"><a href=\"#styled-components\" aria-label=\"styled components permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>styled-components</h2>\n<p>자바스크립트 파일 안에 스타일을 선언하는 방식. (CSS in JS)\n관련된 라이브러리 종류는 <a href=\"https://gituhb.com/MicheleBertoli/css-in-js\">https://gituhb.com/MicheleBertoli/css-in-js</a> 에서 확인할 수 있습니다.</p>\n<p>그 중 개발자에게 가장 많은 사랑을 받는 styled-components를 알아보겠습니다.</p>\n<br>\n<h4 id=\"sass-사용-1\"><a href=\"#sass-%EC%82%AC%EC%9A%A9-1\" aria-label=\"sass 사용 1 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Sass 사용</h4>\n<ol>\n<li>\n<p>패키지 설치</p>\n</li>\n<li>\n<p>yarn add styled-components</p>\n</li>\n<li>\n<p>파일 생성</p>\n</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">import React from &#39;react&#39;;\nimport styled from &#39;styled-components&#39;;\n\nconst Wrapper = styled.div`\n  border: 1px solid black;\n  display: inline-block;\n  padding: 1rem;\n  border-radius: 3px;\n  &amp;:hover {\n    background: black;\n    color: white;\n  }\n`;\n\nconst StyledButton = ({children, ...rest}) =&gt; {\n  return (\n    &lt;Wrapper {...rest}&gt;\n      {children}\n    &lt;/Wrapper&gt;\n  );\n};\n\nexport default StyledButton;</code></pre></div>\n<br>\n<p>styled-components는 자바스크립트와 CSS 사이의 벽을 허물어 주기 때문에 동적 스타일링이 무척 편리하다는 장점과 한 파일에서 스타일과 자바스크립트 코드를 모두 관리할 수 있다는 장점이 있습니다. 하지만 기존 CSS 파일을 사용한 스타일링과 사뭇 다른 흐름으로 관리한다는 단점 때문에, 협업할 때 HTML/CSS를 작성하는 디자이너가 따로 있다면 일일이 포팅해야 하기에 조금 힘들 수도 있습니다.</p>\n<p>더 자세한 내용은 <a href=\"https://www.styled-components.com/\">https://www.styled-components.com/</a> 을 참고하세요.</p>","fields":{"slug":"/posts/TIL3/","tagSlugs":["/tag/react/","/tag/css/","/tag/css-module/","/tag/sa-ss/","/tag/styled-components/"]},"frontmatter":{"date":"2019-08-26T14:00:00.169Z","description":"CSS Module / Sass / styled-components","tags":["react","css","CSS Module","SaSS","styled-components"],"title":"[TIL-3]"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/TIL3/"}}