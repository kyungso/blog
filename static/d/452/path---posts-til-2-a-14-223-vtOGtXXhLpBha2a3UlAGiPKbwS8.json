{"data":{"site":{"siteMetadata":{"author":{"name":"Kingso","contacts":{"twitter":"#"}},"disqusShortname":"kingsoblog","subtitle":"Kingso's blog","title":"Kingso's blog","url":"https://kingso.netlify.com"}},"markdownRemark":{"id":"25fd36ce-1fde-5597-8fe9-d45efec7b382","html":"<br>\n<h2 id=\"오늘의-til\"><a href=\"#%EC%98%A4%EB%8A%98%EC%9D%98-til\" aria-label=\"오늘의 til permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>오늘의 TIL</h2>\n<ul>\n<li>\n<p><a href=\"#delete-%EC%97%B0%EC%82%B0%EC%9E%90\">delete 연산자</a></p>\n</li>\n<li>\n<p><a href=\"#%ED%94%84%EB%A1%9C%ED%86%A0%ED%83%80%EC%9E%85\">프로토타입</a></p>\n</li>\n<li>\n<p><a href=\"#%EA%B0%9D%EC%B2%B4-%EB%A6%AC%ED%84%B0%EB%9F%B4-%EB%B0%A9%EC%8B%9D%EA%B3%BC-%EC%83%9D%EC%84%B1%EC%9E%90=%ED%95%A8%EC%88%98%EB%A5%BC-%ED%86%B5%ED%95%9C-%EA%B0%9D%EC%B2%B4-%EC%83%9D%EC%84%B1-%EB%B0%A9%EC%8B%9D%EC%9D%98-%EC%B0%A8%EC%9D%B4\">객체 리터럴 방식과 생성자 함수를 통한 객체 생성 방식의 차이</a></p>\n</li>\n<li>\n<p><a href=\"#%EC%8B%A4%ED%96%89-%EC%BB%A8%ED%85%8D%EC%8A%A4%ED%8A%B8\">실행 컨텍스트</a></p>\n</li>\n</ul>\n<br>\n<h3 id=\"delete-연산자\"><a href=\"#delete-%EC%97%B0%EC%82%B0%EC%9E%90\" aria-label=\"delete 연산자 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>delete 연산자</h3>\n<p>delete 연산자는 객체 프로퍼티만 삭제 가능하고, 객체 자체는 삭제하지 못합니다.</p>\n<p>아래의 예제를 통해 보면, foo 객체 자체를 삭제하는 구문이 에러 없이 실행은 되지만, 삭제되지 않고 foo 객체의 프로퍼티가 출력되는 것을 볼 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">var foo = {\n  name : &#39;foo&#39;,\n  age : 30\n};\n\nconsole.log(foo.name);  // foo\n\n// foo의 name 프로퍼티 삭제\ndelete foo.name;\nconsole.log(foo.name);  // undefined\n\n// foo 객체 삭제\ndelete foo;\nconsole.log(foo.age);  // 30</code></pre></div>\n<br>\n<h2 id=\"프로토타입\"><a href=\"#%ED%94%84%EB%A1%9C%ED%86%A0%ED%83%80%EC%9E%85\" aria-label=\"프로토타입 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>프로토타입</h2>\n<h3 id=\"객체-리터럴-방식과-생성자-함수를-통한-객체-생성-방식의-차이\"><a href=\"#%EA%B0%9D%EC%B2%B4-%EB%A6%AC%ED%84%B0%EB%9F%B4-%EB%B0%A9%EC%8B%9D%EA%B3%BC-%EC%83%9D%EC%84%B1%EC%9E%90-%ED%95%A8%EC%88%98%EB%A5%BC-%ED%86%B5%ED%95%9C-%EA%B0%9D%EC%B2%B4-%EC%83%9D%EC%84%B1-%EB%B0%A9%EC%8B%9D%EC%9D%98-%EC%B0%A8%EC%9D%B4\" aria-label=\"객체 리터럴 방식과 생성자 함수를 통한 객체 생성 방식의 차이 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[ 객체 리터럴 방식과 생성자 함수를 통한 객체 생성 방식의 차이 ]</h3>\n<p><strong>객체 리터럴 방식</strong></p>\n<ul>\n<li>\n<p>같은 형태의 객체를 재생성할 수 없음</p>\n</li>\n<li>\n<p>객체의 __proto__ 프로퍼티의 값이 Object 이다.</p>\n</li>\n</ul>\n<p><strong>생성자 함수를 통한 객체 생성 방식</strong></p>\n<ul>\n<li>\n<p>new 객체 생성으로 다른 인자를 넘김으로써 같은 형태의 서로 다른 객체 생성 가능</p>\n</li>\n<li>\n<p>객체의 __proto__ 프로퍼티의 값이 ‘생성자 함수’ 이다.</p>\n</li>\n</ul>\n<p>예제를 보면,</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// 객체 리터럴 방식\nvar foo = {\n  name : &#39;foo&#39;,\n  age : 35,\n  gender : &#39;man&#39;\n};\n\n//생성자 함수를 통한 객체 생성 방식\nfunction Person(name, age, gender) {\n  this.name = name;\n  this.age = age;\n  this.gender = gender;\n}\n\nvar bar = new Person(&#39;bar&#39;, 33, &#39;woman&#39;);\nvar baz = new Person(&#39;baz&#39;, 25, &#39;woman&#39;);</code></pre></div>\n<p><strong>자바스크립트 객체는 자신을 생성한 생성자 함수의 prototype 프로퍼티가 가리키는 객체를 자신의 프로토타입 객체로 설정합니다.</strong></p>\n<p>객체 리터럴 방식에서는 객체 생성자 함수가 Object() 이고,</p>\n<p>생성자 함수 방식의 경우는 ‘생성자 함수 자체’로 예제에서는 Person() 이므로 다른 프로토타입 객체를 가집니다.</p>\n<p>[*참고 - __proto__ 프로퍼티는 크롬환경인 경우 나타납니다. __proto__ 프로퍼티는 자신을 생성한 생성자 함수의 prototype 프로퍼티가 가리키는 객체인 부모 객체를 숨겨진 링크로 연결한다고 생각하면 됩니다.]</p>\n<p>위의 설명을 아래의 그림으로도 표현해보았습니다.</p>\n<p>먼저 객체 리터럴 방식으로 생성된 foo 객체를 그림으로 나타내면 아래와 같습니다.</p>\n<br>\n<p><img src=\"/media/object.jpg\" alt=\"object.jpg\">   </p>\n<br>\n<p>다음으로 Person 생성자 함수를 통해 만들어진 bar 객체, baz 객체를 그림으로 나타내면 아래와 같습니다.</p>\n<br>\n<p><img src=\"/media/person.jpg\" alt=\"person.jpg\">   </p>\n<br>\n<br>\n<h3 id=\"실행-컨텍스트\"><a href=\"#%EC%8B%A4%ED%96%89-%EC%BB%A8%ED%85%8D%EC%8A%A4%ED%8A%B8\" aria-label=\"실행 컨텍스트 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>실행 컨텍스트</h3>\n<p>실행 가능한 코드를 형상화하여 구분하는 추상적인 개념.</p>\n<p>즉, 실행 가능한 자바스크립트 코드 블록이 실행되는 환경입니다.</p>\n<p>실행 컨텍스트에서 중요하게 알아야 되는 <strong>스코프 체인</strong> 이 있습니다.</p>\n<h4 id=\"스코프-체인\"><a href=\"#%EC%8A%A4%EC%BD%94%ED%94%84-%EC%B2%B4%EC%9D%B8\" aria-label=\"스코프 체인 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>스코프 체인</h4>\n<p>C 언어 같은 경우에는 { } 묶여 있는 범위 안에서 선언된 변수는 블록이 끝나는 순간 사라지므로, 밖에서는 접근할 수 없습니다.\n특히 함수의 { } 뿐만 아니라 if, for 문의 { }로 한 불록으로 묶여, 그 안에서 선언된 변수가 밖에서는 접근이 불가능합니다.</p>\n<p>하지만 자바스크립트에서는 함수 내의 { } 블록은 이를테면 for() {}, if {} 와 같은 구문은 유효 범위가 없습니다. <strong>오직 함수만의 유효범위의 한 단위가 됩니다. 이 유효 범위를 나타내는 스코프가 [[scope]] 프로퍼티로 각 함수 객체 내에서 연결 리스트 형식으로 관리되는데, 이를 스코프 체인이라고 합니다.</strong></p>\n<p><strong>각각의 함수는 [[scope]] 프로퍼티로 자신이 생성된 실행 컨텍스트의 스코프 체인을 참조합니다.</strong> 함수가 실행되는 순간 실행 컨텍스트가 만들어지고, <strong>이 실행 컨텍스트는 실행된 함수의 [[scope]] 프로퍼티를 기반으로 새로운 스코프 체인을 만듭니다.</strong></p>\n<p>예제를 통해 정리해봅시다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">var value = &quot;value1&quot;;\n\nfunction printFunc() {\n  var value = &quot;value2&quot;;\n\n  function printValue(){\n    return value;\n  }\n  console.log(printValue());\n}\n\nprintFunc();</code></pre></div>\n<br>\n<p><img src=\"/media/execution_context.jpg\" alt=\"execution_context.jpg\">   </p>\n<br>\n<p>printValue 함수에서 사용하는 value 변수는, printValue 실행 컨텍스트의 변수 객체가 가지는 [[scope]] 프로퍼티 내에 있는 printFunc 변수 객체에서 찾아, 결과값은 “value2”가 됩니다.</p>\n<br>\n<p>위의 예제처럼 자신의 함수 내에 없는 변수여도, 자신의 실행 컨텍스트 내에 [[scope]] 프로퍼티가 가지고 있는 변수 객체들의 리스트에 있는 변수는 사용 가능합니다.</p>","fields":{"slug":"/posts/TIL2/","tagSlugs":["/tag/javascript/","/tag/프로토타입/","/tag/실행-컨텍스트/"]},"frontmatter":{"date":"2019-07-03T14:00:00.169Z","description":"Javascipt 프로토타입 / 실행 컨텍스트","tags":["javascript","프로토타입","실행 컨텍스트"],"title":"[TIL-2]"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/TIL2/"}}